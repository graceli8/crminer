% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crm_text.R
\name{crm_text}
\alias{crm_pdf}
\alias{crm_plain}
\alias{crm_text}
\alias{crm_xml}
\title{Get full text from a DOI}
\usage{
crm_text(url, type = "xml", path = cr_cache_path(), overwrite = TRUE,
  read = TRUE, verbose = TRUE, cache = TRUE,
  overwriteUnspecified = FALSE, ...)

crm_plain(url, path = cr_cache_path(), overwrite = TRUE, read = TRUE,
  verbose = TRUE, overwriteUnspecified = FALSE, ...)

crm_xml(url, path = cr_cache_path(), overwrite = TRUE, read = TRUE,
  verbose = TRUE, overwriteUnspecified = FALSE, ...)

crm_pdf(url, path = cr_cache_path(), overwrite = TRUE, read = TRUE,
  cache = FALSE, verbose = TRUE, overwriteUnspecified = FALSE, ...)
}
\arguments{
\item{url}{(character) A URL.}

\item{type}{(character) One of xml, plain, pdf, or all}

\item{path}{(character) Path to store pdfs in. By default we use
\code{paste0(rappdirs::user_cache_dir(), "/crminer")}, but you can
set this directory to something different. Ignored unless getting
pdf}

\item{overwrite}{(logical) Overwrite file if it exists already?
Default: \code{TRUE}}

\item{read}{(logical) If reading a pdf, this toggles whether we extract
text from the pdf or simply download. If \code{TRUE}, you get the text from
the pdf back. If \code{FALSE}, you only get back the metadata.
Default: \code{TRUE}}

\item{verbose}{(logical) Print progress messages. Default: \code{TRUE}}

\item{cache}{(logical) Use cached files or not. All files are written to
your machine locally, so this doesn't affect that. This only states whether
you want to use cached version so that you don't have to download the file
again. The steps of extracting and reading into R still have to be performed
when \code{cache=TRUE}. Default: \code{TRUE}}

\item{overwriteUnspecified}{(logical) Sometimes the crossref API returns mime type
'unspecified' for the full text links (for some Wiley dois for example).
This parameter overrides the mime type to be \code{type}.}

\item{...}{Named parameters passed on to \code{\link[httr]{GET}}}
}
\description{
Get full text from a DOI
}
\details{
Note that \code{\link{crm_text}},
\code{\link{crm_pdf}}, \code{\link{crm_xml}}, \code{\link{crm_plain}}
are not vectorized.

Note that some links returned will not in fact lead you to full text
content as you would understandbly think and expect. That is, if you
use the \code{filter} parameter with e.g., \code{\link[rcrossref]{cr_works}}
and filter to only full text content, some links may actually give back
only metadata for an article. Elsevier is perhaps the worst offender,
for one because they have a lot of entries in Crossref TDM, but most
of the links that are apparently full text are not in facct full text,
but only metadata.
}
\examples{
\dontrun{
library("rcrossref")

# pdf link
crm_links(doi = "10.5555/515151", "pdf")

# xml and plain text links
out <- cr_works(filter=c(has_full_text = TRUE))
dois <- out$data$DOI
crm_links(dois[1], "pdf")
crm_links(dois[2], "xml")
crm_links(dois[1], "plain")
crm_links(dois[1], "all")

# No links
crm_links(cr_r(1), "xml")

# get full text
## pensoft
out <- cr_members(2258, filter=c(has_full_text = TRUE), works = TRUE)
(links <- crm_links(out$data$DOI[1], "all"))
### xml
crm_text(links, 'xml')
### pdf
crm_text(links, "pdf", read=FALSE)
crm_text(links, "pdf")

### another pensoft e.g.
links <- crm_links("10.3897/phytokeys.42.7604", "all")
pdf_read <- crm_text(url = links, type = "pdf", read=FALSE,
  verbose = FALSE)
pdf <- crm_text(links, "pdf", verbose = FALSE)

## hindawi
out <- cr_members(98, filter=c(has_full_text = TRUE), works = TRUE)
(links <- crm_links(out$data$DOI[1], "all"))
### xml
crm_text(links, 'xml')
### pdf
crm_text(links, "pdf", read=FALSE)
crm_text(links, "pdf")

## search for works with full text, and with CC-BY 3.0 license
### you can see available licenses with cr_licenses() function
out <-
 cr_works(filter = list(has_full_text = TRUE,
   license_url="http://creativecommons.org/licenses/by/3.0/"),
   limit = 100)
(links <- crm_links(out$data$DOI[40], "all"))
# crm_text(links, 'xml')

## You can use crm_xml, crm_plain, and crm_pdf to go directly to
## that format
licenseurl <- "http://creativecommons.org/licenses/by/3.0/"
out <- cr_works(
  filter = list(has_full_text = TRUE, license_url = licenseurl),
  limit = 100)
(links <- crm_links(out$data$DOI[50], "all"))
crm_xml(links)
#crm_pdf(links)

### Caching, for PDFs
# out <- cr_members(2258, filter=c(has_full_text = TRUE), works = TRUE)
# (links <- crm_links(out$data$DOI[10], "all"))
# crm_text(links, type = "pdf", cache=FALSE)
# system.time( cacheyes <- crm_text(links, type = "pdf", cache=TRUE) )
### second time should be faster
# system.time( cacheyes <- crm_text(links, type = "pdf", cache=TRUE) )
# system.time( cacheno <- crm_text(links, type = "pdf", cache=FALSE) )
# identical(cacheyes, cacheno)

## elsevier
## requires extra authentication
out <- cr_members(78, filter=c(has_full_text = TRUE), works = TRUE)
## set key first
# Sys.setenv(CROSSREF_TDM_ELSEVIER = "your-key")
## XML
link <- crm_links(out$data$DOI[1], "xml")
# res <- crm_text(url = link, type = "xml")
## plain text
link <- crm_links(out$data$DOI[1], "plain")
# res <- crm_text(url = link, "plain")

## Wiley
Sys.setenv(CROSSREF_TDM = "your-key")

### all wiley
out <- cr_members(311, filter=c(has_full_text = TRUE,
   type = 'journal-article'), works = TRUE)
dois <- out$data$DOI[1:10]
# res <- list()
# for (i in seq_along(dois)) {
# tmp <- crm_links(dois[i], "all")
# res[[i]] <- crm_text(tmp, type = "pdf", cache=F, overwriteUnspecified=T)
# }
# res

#### older dates
out <- cr_members(311, filter=c(has_full_text = TRUE,
      type = 'journal-article', until_created_date = "2013-12-31"),
      works = TRUE)

dois <- out$data$DOI[1:10]
# res <- list()
# for (i in seq_along(dois)) {
#   tmp <- crm_links(dois[i], "all")
#   res[[i]] <- crm_text(tmp, type = "pdf", cache=FALSE, overwriteUnspecified=T)
# }
# res

### wiley subset with CC By 4.0 license
lic <- "http://creativecommons.org/licenses/by/4.0/"
out <- cr_members(311, filter=c(has_full_text = TRUE, license.url = lic),
   works = TRUE)
dois <- out$data$DOI[1:10]
# res <- list()
# for (i in seq_along(dois)) {
#   tmp <- crm_links(dois[i], "all")
#   res[[i]] <- crm_text(tmp, type = "pdf", cache=F, overwriteUnspecified=T)
# }
}
}

